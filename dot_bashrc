# -*- mode: shell-script -*-

export TERM=dtterm
export EDITOR=`which emacs`

# tips from http://blog.macromates.com/2008/working-with-history-in-bash/
# Do not store duplicate entries in history (keeps history shorter)
export HISTCONTROL=erasedups
# keep 10K lines (default is 1K)
export HISTSIZE=10000
# append to the end of the history, instead of overwriting, on shell exit
shopt -s histappend

function add_once_to_path() {
    if [[ "$PATH" != "*$1*" ]]; then
        PATH=$PATH:$1
        export PATH
    fi
}

function prepend_once_to_path() {
    if [[ "$PATH" != "*$1*" ]]; then
        PATH=$1:$PATH
        export PATH
    fi
}

prepend_once_to_path "$HOME/bin"
#add_once_to_path "$HOME/Library/iTunes/Scripts/iTunes-LAME.app/Contents/Resources/"
#add_once_to_path "/usr/local/mysql/bin"
add_once_to_path "/usr/local/sbin"
prepend_once_to_path "/usr/local/bin"

#add_once_to_path "$HOME/Code/Android/android-sdk-mac_86/tools/"


if [ $MANPATH ]; then
    function add_once_to_manpath() {
        if [[ "$MANPATH" != "*$1*" ]]; then
            MANPATH=$MANPATH:$1
        fi
    }
    add_once_to_manpath "/usr/local/man"
else
    MANPATH=/usr/share/man:/usr/bin/man:/usr/local/man:/usr/local/share/man:/opt/local/man
fi
export MANPATH

if [ -f ~/.bash_aliases ]; then
 . ~/.bash_aliases
fi

if [ -f ~/myconfigs/dot_bash_aliases ]; then
 . ~/myconfigs/dot_bash_aliases
fi

if [ -f ~/.bash_aliases_jamie ]; then
 . ~/.bash_aliases_jamie
fi

# See if the excellent Homebrew pakage manager for MacOS
# (http://mxcl.github.com/homebrew/) is installed. If so,
# configure this shell for some packages that might be installed
BREW_BINARY=`which brew`
if [ ! -z "${BREW_BINARY}" ]; then
    BREW_PREFIX=`brew --prefix`
    #
    # If the bash_completion package is installed, use it
    # it provides completion for Git and SSH if you have
    # also installed the Brew versions of those programs
    #
    BASH_COMPLETION_SCRIPT=${BREW_PREFIX}/etc/bash_completion
    if [ -f ${BASH_COMPLETION_SCRIPT} ]; then
	. ${BASH_COMPLETION_SCRIPT}
    fi

    #
    # for Go (a programming language golang.org)
    #
    BREW_GO=`brew --prefix go`
    # $? (exit code) should equal 0 if that succeeded
    if (( $? && 0 )); then
	export GOOS=darwin
	export GOARCH=amd64
	export GOROOT=${BREW_GO}
	export GOBIN=${BREW_PREFIX}/bin/
    fi
fi # end of Brew things

# My new Git friendly prompt, which uses Git bash completion
GIT_PS1='\t \u@\h \w $(__git_ps1 "(branch: %s)")\n\$ '

# load the Bash completion function for Git
GIT_BASH_COMPLETION="/usr/local/etc/bash_completion.d/git-prompt.sh"
GIT_BASH_COMPLETION_OLD="/usr/local/etc/bash_completion.d/git-completion.bash"
GIT_BASH_COMPLETION_UBUNTU="/etc/bash_completion.d/git"
if [ -f $GIT_BASH_COMPLETION ]; then
  . $GIT_BASH_COMPLETION
  export PS1=${GIT_PS1}
elif [ -f $GIT_BASH_COMPLETION_OLD ]; then
  . $GIT_BASH_COMPLETION_OLD
  export PS1=${GIT_PS1}
elif [ -f $GIT_BASH_COMPLETION_UBUNTU ]; then
 . $GIT_BASH_COMPLETION_UBUNTU
  export PS1=${GIT_PS1}
else
 # Don't know how to find Bash Git, completion
 # Fall back on  my old favorite prompt:
 export PS1="\t \h@\u \w >"
fi

# a nice MySQL prompt
export MYSQL_PS1="\r:\m:\s \h \d \nmysql>"

# modified from what the RVM installer added to first check for RVM
if [[ -d $HOME/.rvm/ ]]; then
    PATH=$PATH:$HOME/.rvm/bin # Add RVM to PATH for scripting
fi


