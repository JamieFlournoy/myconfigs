# -*- mode: shell-script -*-

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# My functions
. ~/myconfigs/functions

color_term=$(set_term)
set_editor
set_manpath
configure_history

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see
# lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# Set up platformio (an embedded software development system) binaries
# in ~/.local/bin.
#
# This comes before the prepend_once_to_path for ~/.local/bin so that
# that function will find the ~/.local/bin dir if these functions
# actually created it.
symlink_one_binary_to_dotlocal ~/.platformio/penv/bin/platformio
symlink_one_binary_to_dotlocal ~/.platformio/penv/bin/pio
symlink_one_binary_to_dotlocal ~/.platformio/penv/bin/piodebuggdb

# Note that these functions automatically check for dir existence
# before adding them to the PATH
prepend_once_to_path "$HOME/bin"
prepend_once_to_path "$HOME/.local/bin"
prepend_once_to_path "/usr/local/bin"
add_once_to_path "$HOME/homebrew/bin"
add_once_to_path "$HOME/Library/iTunes/Scripts/iTunes-LAME.app/Contents/Resources/"
add_once_to_path "/usr/local/mysql/bin"
add_once_to_path "/usr/local/sbin"

if [[ -e /opt/homebrew ]]; then
  eval "$(/opt/homebrew/bin/brew shellenv)"
fi

#add_once_to_path "$HOME/Code/Android/android-sdk-mac_86/tools/"

export TERM=dtterm

export BASH_SILENCE_DEPRECATION_WARNING=1

# xterm is lame, use 256 colors.
if [[ "$TERM" == "xterm" ]]; then
  export TERM=xterm-256color
fi

# Tips from http://blog.macromates.com/2008/working-with-history-in-bash/
# Do not store duplicate entries in history (keeps history shorter).
export HISTCONTROL=erasedups
# keep 50K lines (default is 1K)
export HISTSIZE=50000
# Append to the end of the history, instead of overwriting, on shell exit.
shopt -s histappend

# Merge all shells' histories together.
# export PROMPT_COMMAND="history -a; history -c; history -r; $PROMPT_COMMAND"

if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
fi

if [[ $color_term -ne 0 ]]; then
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# Load systemwide bash completion scripts
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi
# Load /usr/local bash completion scripts
[ -f /usr/local/etc/bash_completion ] && . /usr/local/etc/bash_completion

# TODO: move the 'is homebrew present and if so what is its prefix' code
# into a shell-scoped variable

# TODO: make a general 'load bash completion for ___' function and use it here
# to load 'git-completion.bash', 'brew', 'gzip', 'mount', 'postgresql', 'rsync',
# 'ssh', 'sshfs', and 'sqlite' completion scripts
#
# Currently git bash completion is loaded below, via
# find_git_bash_functions. This might wanna be merged into the above function.

#
# For later use, if identifying Intel vs. Apple Silicon is needed:
#
# if [[ $(sysctl -n machdep.cpu.brand_string) =~ "Apple" ]]; then
#   echo "It's Apple silicon!"
# else

# If homebrew is installed, try to enable diff-highlight.
if which brew > /dev/null; then
    if [[ ! -e ~/bin/diff-highlight ]]; then
        brew_binary=$(configure_homebrew)
        if [[ -f $brew_binary ]]; then
            brewDiffHighlight="$($brew_binary --prefix)/share/git-core/contrib/diff-highlight/diff-highlight"
            if [[ -f $brewDiffHighlight ]]; then
                if [[ ! -d ~/bin ]]; then
                    /bin/mkdir ~/bin
                fi
                /bin/ln -s $brewDiffHighlight ~/bin/diff-highlight
            fi
        fi
    fi
fi

# TODO: use diff-highlight on Linux, which is here:
# /usr/share/doc/git/contrib/diff-highlight/diff-highlight

git_function_files=$(find_git_bash_functions)
for f in $git_function_files
do
    . $f
done

have_git_ps1_function=0
if [[ -n $git_function_files ]]; then
    type -t __git_ps1 | grep -qE 'shell|function' && have_git_ps1_function=1
    type -t git_prompt_config | grep -qE 'shell|function' && have_git_ps1_function=1
    if [[ $have_git_ps1_function -eq 0 ]]; then
        echo "Loaded git completion but not prompt functions."
#        type -t __git_ps1 | grep -qE 'shell|function' | echo
        if which brew > /dev/null; then
            echo "Try 'brew install bash-git-prompt' to install them."
        fi
    fi
else
    echo "Could not find Git bash functions."
fi

if [[ $color_term -ne 0 ]]; then
    # Note: ~/bin/show-term-colors.sh shows terminal color codes
    # ex 47;1;37m is bold white on gray BG
    no_color="\[\033[0m\]"
    prompt_color="\[\033[30;47m\]"
    prompt_color_2="\[\033[35m\]"
fi
# Build the PS1 prompt, with or without the git branch, and with or without color.
function prompt_with_git() {
    PS1=${prompt_color}'\D{%a %-m/%-d} \t \u@\h \w '$GIT_BRANCH${no_color}'\n'${prompt_color_2}'\$ '${no_color}
}
PROMPT_COMMAND=prompt_with_git
#echo Just set PS1 to $PS1

if [[ -f ~/.alias_completion_function ]]; then
    source ~/.alias_completion_function
fi

if [[ -n `which p4` ]]; then
    export P4CONFIG=.p4config
    export P4EDITOR=$EDITOR
fi

# a nice MySQL prompt
export MYSQL_PS1="\r:\m:\s \h \d \nmysql>"

#
# Try and use RVM if available
#
enable_rvm=1
if [[ $enable_rvm == 1 ]]; then
    # modified from what the RVM installer added to first check for RVM
    if [ -d $HOME/.rvm/ ]; then
        PATH=$PATH:$HOME/.rvm/bin # Add RVM to PATH for scripting
    fi
    if [[ "rvm is a function" != "`type -t rvm | head -n 1`" ]]; then
        [[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*
    fi
fi

#
# Try and use rbenv if available
#
if [[ `which rbenv` == '' ]]; then
    if [ -e ~/.rbenv/bin/rbenv ]; then
        export PATH="$HOME/.rbenv/bin:$PATH"
    fi
fi
# If it's in the path (which it should be by now if it's installed),
# use it.
if [[ `which rbenv` != '' ]]; then
    eval "$(rbenv init -)"
fi

if [[ -f ~/.bashrc_local ]]; then
    . ~/.bashrc_local
fi

#
# Try and use jenv if available
#
# To install jenv on Mac OS: brew install jenv
#
if which jenv > /dev/null; then
    export PATH="$HOME/.jenv/bin:$PATH"
    eval "$(jenv init -)"
fi

#
# Try and use cargo (Rust) if available
#

if [[ -f ~/.cargo/env ]]; then
    . "$HOME/.cargo/env"
fi

#GPG_TTY=$(tty)
#export GPG_TTY
#[ -f ~/.gnupg/gpg-agent.env ] && source ~/.gnupg/gpg-agent.env
#if [ -S "${GPG_AGENT_INFO%%:*}" ]; then
#    export GPG_AGENT_INFO
#else
#    eval $(gpg-agent --daemon --log-file /tmp/gpg.log --pinentry-program /usr/local/bin/pinentry-mac)
#fi

# direnv docs say this must run last.
if [[ `which direnv` != '' ]]; then
    eval "$(direnv hook bash)"
else
    if [[ -e ~/.envrc ]]; then
        echo "Warning: You have a direnv config file (~/.envrc), but direnv is not"
        echo "installed / not on your PATH, so your ~/.envrc won't be loaded."
    fi
fi

if [[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]]; then
    export SDKMAN_DIR="$HOME/.sdkman"
    source "$HOME/.sdkman/bin/sdkman-init.sh"
fi


# Aliases need to go after git completion because they include code
# that makes git completion of aliases work. I choose to put them at
# the end because nothing should depend on aliases.
if [ -f ~/.bash_aliases ]; then
 . ~/.bash_aliases
fi

if [ -f ~/myconfigs/dot_bash_aliases ]; then
 . ~/myconfigs/dot_bash_aliases
fi

if [ -f ~/.bash_aliases_jamie ]; then
 . ~/.bash_aliases_jamie
fi

# Load NVM (manages different versions of nodejs).
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
