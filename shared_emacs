;; -*- mode: Emacs-Lisp -*-

;;
;;
;; Basic things
;;
;;

(setq inhibit-splash-screen t)
(setq inhibit-startup-message t)

;; spaces, never tabs
(setq-default indent-tabs-mode nil)

(setq tab-width 2)

;; show more info in taskbar/icon than just "Emacs"
(setq-default frame-title-format (list "%65b %f"))
(setq-default icon-title-format (list "%b"))

;; show time on status bar
(display-time)

;; make the y or n suffice for a yes or no question
(fset 'yes-or-no-p 'y-or-n-p)

;; show paren, brace, and curly brace "partners" at all times
(show-paren-mode t)

;; When you scroll down with the cursor, emacs will move down the buffer one
;; line at a time, instead of in larger amounts.
(setq scroll-step 1)

;; Show highlighting.
(setq-default transient-mark-mode t)

;; No tilde files pls.
(setq make-backup-files nil)

;; If backup files are used, don't rename original to original~ and
;; then create a new one, instead copy original to original~ and
;; modify original. This is helpful for Graphviz.app and many others
;; that actually watch the original file (and will be confused if it
;; becomes the backup file).
(setq backup-by-copying t)

;; in the 21st century we don't put two spaces at the end of a sentence.
(setq sentence-end-double-space nil)

;; Insert, don't overwrite.
(put 'overwrite-mode 'disabled t)

;; Always enable column-number-mode, because knowing what row & column
;; you're at is good.
(column-number-mode t)

;; Highlight the 1st character past the column limit
(setq load-path (append (list (expand-file-name "~/.emacs.d/column-marker")) load-path))
(require 'column-marker)
;; Installing the above: get from
;;    https://www.emacswiki.org/emacs/download/column-marker.el
;; Put at ~/.emacs.d/column-marker/column-marker.el
;; Then m-X byte-compile-file that to make ~/.emacs.d/column-marker/column-marker.elc

;; Highlight trailing whitespace in red.
(setq whitespace-style (append (list 'face 'trailing)))
(autoload 'whitespace-mode "whitespace" "Toggle whitespace visualization." t)
(global-whitespace-mode t)

;; don't automatically add new lines when scrolling down at the bottom
;; of a buffer
(setq next-line-add-newlines nil)

;; be able to do Ctrl-X, u/l  to upper/lowercase regions without confirm
(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)

;;
;;
;; Colors and fonts
;;
;;

;; syntax hilite
(global-font-lock-mode t)
(setq font-lock-maximum-decoration t)



;; custom-set-faces was added by Custom.
;; If you edit it by hand, you could mess it up, so be careful.
;; Your init file should contain only one such instance.
;; If there is more than one, they won't work right.
(if (display-graphic-p)
    (if (eq system-type 'darwin)
        (custom-set-faces
         '(default ((t (:inherit nil :stipple nil :background "black" :foreground "white" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 110 :width normal :foundry "unknown" :family "Monaco"))))
         '(fixed-pitch ((t nil)))
         '(font-lock-comment-face ((t (:foreground "green"))))
         '(font-lock-string-face ((t (:foreground "yellow"))))
         '(font-lock-builtin-face ((t (:foreground "cyan"))))
         '(font-lock-variable-name-face ((((class color) (min-colors 88) (background dark)) (:foreground "red"))))
         '(my-long-line-face ((((class color)) (:underline t :weight bold))) t)
         '(sh-heredoc ((((class color) (background light)) (:foreground "purple4")))))
      (custom-set-faces
       '(default ((t (:inherit nil :stipple nil :background "black" :foreground "white" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 90 :width normal :foundry "unknown" :family "Liberation Mono"))))
       '(fixed-pitch ((t nil)))
       '(font-lock-comment-face ((t (:foreground "green"))))
       '(font-lock-string-face ((t (:foreground "yellow"))))
       '(font-lock-builtin-face ((t (:foreground "cyan"))))
       '(font-lock-variable-name-face ((((class color) (min-colors 88) (background dark)) (:foreground "red"))))
       '(my-long-line-face ((((class color)) (:underline t :weight bold))) t)
       '(sh-heredoc ((((class color) (background light)) (:foreground "purple4")))))
      )
)

;; (set-face-foreground 'font-lock-comment-face "DarkOliveGreen3")
;; (set-face-foreground 'font-lock-string-face  "purple4")


;; long line warning: bold and underlined
(add-hook 'font-lock-mode-hook
          (function
           (lambda ()
             (setq font-lock-keywords
                   (append font-lock-keywords
                           '(("^.\\{1011,\\}$" (0 'my-long-line-face t))))))))

(if (eq system-type 'gnu/linux)
    (set-scroll-bar-mode 'right)

    ;; disable middle button, because if it's a wheel mouse that button is
    ;; too sensitive so I get lots of unexpected pasted crap in the middle
    ;; of the stuff I'm editing!
    (global-set-key [mouse-2] nil)

    ;; (set-default-font "Liberation Mono-9")
)

;;
;;
;; Major modes
;;
;;

(if (file-exists-p "~/.emacs.d/graphviz-dot-mode.el")
  (load-file "~/.emacs.d/graphviz-dot-mode.el")
  )

;; only use js2-mode when not using the google-emacs package.
(unless (file-exists-p "~/gconfigs/.emacs_local")
  ;; JavaScript
  (setq load-path (append (list (expand-file-name "~/.emacs.d/js2")) load-path))
  (autoload 'js2-mode "js2" nil t)
  (add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
  ;; In JS2 mode, have column-marker activate after 80 columns.
  (add-hook 'js2-mode-hook (lambda () (interactive) (column-marker-1 80)))
  (add-hook 'js2-mode-hook (lambda () (interactive) (set-fill-column 80)))
  (setq js2-mode-escape-quotes nil)
  )


;; Closure templates
(setq load-path (append (list (expand-file-name "~/.emacs.d/soy")) load-path))
(autoload 'closure-template-html-mode "closure-template-html-mode" nil t)
(add-to-list 'auto-mode-alist '("\\.soy$" . closure-template-html-mode))

;; CSS
(autoload 'css-mode "css-mode")
(add-to-list 'auto-mode-alist '("\\.css$" . css-mode))

;; C-mode for Arduino
(add-to-list 'auto-mode-alist '("\\.ino$" . c-mode))

;; Java
;; In Java mode, hava column-mark activate after 100 columns.
(add-hook 'java-mode-hook (lambda () (interactive) (column-marker-1 100)))
(add-hook 'java-mode-hook (lambda () (interactive) (set-fill-column 100)))

;; Protocol Buffers
;; In Protocol Buffers mode, have column-mark activate after 80 columns.
(add-hook 'protobuf-mode-hook (lambda () (interactive) (column-marker-1 80)))
(add-hook 'protobuf-mode-hook (lambda () (interactive) (set-fill-column 80)))

;; Python
(setq python-indent-offset 2)
;; In Python mode, have column-mark activate after 80 columns.
(add-hook 'python-mode-hook (lambda () (interactive) (column-marker-1 80)))
(add-hook 'python-mode-hook (lambda () (interactive) (set-fill-column 80)))

;; Go
(add-hook 'go-mode-hook (lambda () (setq tab-width 2)))

;; Text
(add-hook 'text-mode-hook (lambda () (interactive) (set-fill-column 80)))

;; HTML
;; for html-helper-mode.el
;;(autoload 'html-helper-mode "html-helper-mode" "Yay HTML" t)
;;(setq auto-mode-alist (cons '("\\.html$" . html-helper-mode) auto-mode-alist))
;; for html-font.el
;; (add-hook 'html-helper-load-hook '(lambda () (require 'html-font)))

;; Markdown
(add-hook 'markdown-mode-hook (lambda () (interactive) (column-marker-1 80)))
(add-hook 'markdown-mode-hook (lambda () (interactive) (set-fill-column 80)))

;; Ruby
(setq load-path (append (list (expand-file-name "~/.emacs.d/ruby-mode")) load-path))
(autoload 'ruby-mode "ruby-mode" "Major mode for editing ruby scripts." t)
(setq auto-mode-alist (cons '("\\.rb$" . ruby-mode) auto-mode-alist))
;; Ruby's friend RHTML
(setq auto-mode-alist (cons '(".rhtml$" . html-mode) auto-mode-alist))
(setq ruby-insert-encoding-magic-comment nil)

;; JSP
;; (setq auto-mode-alist (cons '("\\.jsp$" . html-mode) auto-mode-alist))

;; Graphviz
;;(load-file "/Applications/Emacs.app/Contents/Resources/share/emacs/22.0.95/site-lisp/graphviz-dot-mode.el")

;; PHP
;;(load-library "php-mode-099")

;; Cucumber feature files
(add-hook 'feature-mode-hook (lambda () (interactive) (column-marker-1 84)))
(add-hook 'feature-mode-hook (lambda () (interactive) (set-fill-column 84)))


(require 'generic-x)
(add-to-list 'generic-extras-enable-list 'javascript-generic-mode)

;;
;;
;; MISC SECTION
;;
;;

;; Show ASCII table
(defun ascii-table ()
  "Print the ascii table. Based on a defun by Alex Schroeder <asc@bsiag.com>"
  (interactive)
  (switch-to-buffer "*ASCII*")
  (erase-buffer)
  (insert (format "ASCII characters up to number %d.\n" 254))
  (let ((i 0))
    (while (< i 254)
      (setq i (+ i 1))
      (insert (format "%4d %c\n" i i))))
  (beginning-of-buffer))

;; Convert a buffer from dos ^M end of lines to unix end of lines
(defun dos2unix ()
  (interactive)
    (goto-char (point-min))
      (while (search-forward "\r" nil t) (replace-match "")))

;; vice versa
(defun unix2dos ()
  (interactive)
    (goto-char (point-min))
      (while (search-forward "\n" nil t) (replace-match "\r\n")))

;; The following snippet was copied from the Oreilly-published book
;; "Writing GNU Emacs Extensions" by Bob Glickstein.
(defalias 'scroll-ahead 'scroll-up)
(defalias 'scroll-behind 'scroll-down)
(defun scroll-n-lines-ahead (&optional n)
  "Scroll ahead N lines (1 by default)."
  (interactive "P")
  (progn
    (scroll-ahead (prefix-numeric-value n))
    (next-line 1)))

(defun scroll-n-lines-behind (&optional n)
  "Scroll behind N lines (1 by default)."
  (interactive "P")
  (progn
    (scroll-behind (prefix-numeric-value n))
    (previous-line 1)))

(require 'package)
(add-to-list 'package-archives
             '("melpa-stable" . "https://stable.melpa.org/packages/") t)
(package-initialize)
;;LOCAL HOOKS SECTION - note this section should be last to allow an
;;.emacs_local file to override the .emacs.  The .emacs_local file should
;;contain anything specific to a particular environment/platform/machine.
(if (file-exists-p "~/.emacs_local")
    (load-file "~/.emacs_local"))
